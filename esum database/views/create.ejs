<html lang="en">
<%- include("./partials/head.ejs") %>

<body>
  <%- include("./partials/nav.ejs") %>

  <div class="create-email content">
    <form action="/email" method="POST">
      <label for="subject">Email Subject:</label>
      <input type="text" id="subject" name="subject" required>
      <label for="receipient">Email Receipients:</label>
      <input type="text" id="receipient" name="receipient" required>
      <label for="body">Email body:</label>
      <textarea id="body" name="body" required></textarea>
      <label for="userId">user ID:</label>
      <input id="userId" name="userId" required></input>
      <button>Submit</button>
    </form>

    <h2>New thread to analyze? </h2>
    <p>
        Upload your Email file below

    <form id="file_sub">
            <input type="file" name="orgEmail" accept=".txt">
            <br>
            <input type="submit" value="Upload">
    </form>
    <small>How to transfer your email log to a file? Check our <a href="/faq">FAQ</a> </small>
    </p>

  </div>
  <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script>
        <script>
            $(document).ready(function () {
                    $("#file_sub").submit(function(e) {
                        e.preventDefault();
                        //Don't submit after click, as Ajax will create post request
                        
                        var f = $('input[type="file"]')[0].files[0];
                        //retrieve contents from the uploaded file
                        const scan = new FileReader();

                        scan.onload = function () {
                            let content = scan.result;
                            esumAnalysis(content);
                            //onload:when scan is complete, send contents to EA 
                        }
                        scan.readAsText(f);
                        //reads uploaded text file and the results awaits in the onload events


                        function esumAnalysis(file) {
                            //1.1, Find all emails in thread
                            const ePattern = /(\w+([.-]?\w)+@\w+(\.\w{2,3}))/g;
                            // the patttern of a email is used for a match. Global tag makes sure exec searches for all instances 

                           
                            let match = ePattern.exec(file);
                            var allEmail = [];
                            let i = 0;

                            while (match) {
                                allEmail[i] = match[1];
                                i++;
                                match = ePattern.exec(file);
                            }
                            //every time there's a match for an email, add the email onto the array

                            //2.1, Remove the duplicate emails from the lists
                            let emails = [];

                            for (j = 0; j < allEmail.length; j++) {
                                if (!emails.includes(allEmail[j])) {
                                    emails.push(allEmail[j]);
                                }
                            }
                            //checking if the current index is not inside the clean array before we push in
                            //1.2, Version (outlook only and outlook and Outside email provider): Seperate threads into singular threads and determine futher analysis 

                            const outlook = /From:/;
                            const outsideE = /On \w{3} \d{1,2}[,] \d{4}[,]|On \w{3,9}[,] \w{3,9} \d{1,2}[,]/g;

                            //Test if the email is exhange with the same email provider: Only see From,cc,cd,to between all users, any Hotmail and Outlook service will treat as same Email provifer
                            //Or if the exchange is between emails outside of the provider: Outlook->Yahoo,Google,Pronto
                            var ingroup = outlook.exec(file);
                            var outgroup = outsideE.exec(file);

                            if (ingroup && !outgroup) {
                                //If emails are within the same email provider
                                var eThreads = file.split(outlook);

                            } else if (ingroup && outgroup) {
                                //If emails are exchanged between different email providers
                                var eThreads=[];
                                var t;
                                var temp = file.split(outlook);
                                for (z = 0; z < temp.length; z++) {
                                    t = outsideE.exec(temp[z]);
                                    if (z==0 && !temp[0].includes(outgroup[0])) {
                                        eThreads.push(temp[z]);
                                        //if there's not an outside eProvider in the specific string, Push whole block into eThreads. This accounts the first match
                                    } else if (!t && z!=0){
                                        eThreads.push(temp[z]);
                                        //For the matches after zero
                                    }else {
                                        var temp2 = temp[z].split(outsideE);
                                        for (y = 0; y < temp2.length; y++) {
                                            eThreads.push(temp2[y]);
                                        }
                                       // Spilt string into multiple blocks  with outsideE and push in-order of new spilt
                                    }
                                    

                                }
                            } else {
                                //If there's no match, There is no text inside the file
                                alert("There are no email threads inside this file!");
                                $.ajax({
                                   url:"/email/create",
                                   method:"GET",
                                   success:function(){ console.log("User submitted a file that's not a email chain")},
                                   error: function(){console.log("error in GET")}
                               });
                            }

                            if(eThreads.length > 3){
                                //1.3, Find the Admin and create the user profiles with AJAX
                                
                                const lP= eThreads.length-1; 
                                var admin= ePattern.exec(eThreads[lP]);
                                //the last item on the array will the be adminstator of the email. The first email match (From:) will be the Admin

                                let max=Math.floor(Math.random()*2000);
                                max=max.toString();
                                var pass= "password"+max;
                                alert('Admin: your group password is:'+ pass);
                                //basic randomized password function, tells admin to spread password with memeber
                            
                                for (var a = 0; a < emails.length; a++) {
                                    $.ajax({
                                        url: "/user/user",
                                        method: "POST",
                                        data: {
                                            userEmail: emails[a],
                                            password: pass
                                        }
                                    })
                                        .done(function (){
                                            console.log("User "+emails[a]+"account is created");
                                        });
                                }
                                var participants = [];
                                var temp = []
                                //Create found user profiles, awaits Admin user or option to specify
                                //2.1,  Emails. Grab all participants of the singular email and push into array at the index of the thread
                                for (b = 0; b < eThreads.length; b++) {
                                    for (c = 0; c < emails.length; c++) {
                                        if (eThreads[b].includes(emails[c])) {
                                            temp.push(emails[c]);
                                        }
                                    }
                                    participants.push(temp);
                                    temp=[];
                                }
                                //2.2, Grab the subject line of each thread and push into array.
                                //Replace any new line (the account of 2+ Spaces) with two stars, Helps with bug of short/no subjects-> grabs first sentence, limits down to Greeting
                                const newSec = /\s{2}/g;

                                for (x = 0; x < eThreads.length; x++) {
                                    eThreads[x] = eThreads[x].replace(newSec, "**");
                                }
                                //** can be used in grabbing the body from the email
                                const subPattern = /Subject: [\s{1}\w-.:()_/]{0,72}[^**]/g;
                                var subject = [];


                                for (d = 0; d < eThreads.length; d++) {
                                    match = subPattern.exec(eThreads[d]);
                                    if (match) {
                                        subject.push(match[0]);
                                    }

                                }

                                //Bug? Sometimes the pattern is ignored, Next update either fixes this bug or palacates the problem with subsitution
                                //Note: If user exchanges emails with a Google provider: Google doesn't include Subject in Threads with From and CC'd users
                                //Possible solution: Subsitution


                                //2.3, Grab the date of the email thread

                                //2.4, Grab the body of the email thread
                                //2.5, Idenitfy if body has a signuartue and delete.
                                //2.6, Create the AJAX post with the email model in mind for the data section


                            } else {
                               alert("The submission is too small for analysis: Try a longer submission");
                               $.ajax({
                                   url:"/email/create",
                                   method:"GET",
                                   success:function(){ console.log("Submission threads under three: no accounts were made")},
                                   error: function(){console.log("error in GET")}
                               });
                            }

                        }

                    });
                });
        </script> 
        <!--Google's jquery library-->        
  <%- include("./partials/footer.ejs") %>
</body>

</html>